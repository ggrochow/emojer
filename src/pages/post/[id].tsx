import { GetServerSidePropsContext, type NextPage } from "next";
import Head from "next/head";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

import { api, RouterOutputs } from "~/utils/api";
import { useRouter } from "next/router";

type TweetData = RouterOutputs["posts"]["getAll"][number];

const TweetView = (props: { tweet: TweetData }) => {
  return (
    <div className="border-t border-zinc-700 p-4 shadow-lg">
      <div className="flex items-center">
        <img
          src={props.tweet.user.profileImageUrl}
          alt="Profile"
          className="h-14 w-14 rounded-full"
        />
        <div className="ml-3 flex flex-col text-2xl">
          <div className="text-base font-bold text-slate-300">
            <span>{`@${props.tweet.user.username}`}</span>
            <span className="font-thin">{` Â· ${dayjs(
              props.tweet.createdAt
            ).fromNow()}`}</span>
          </div>
          <div className="text-slate-300">{props.tweet.content}</div>
        </div>
      </div>
    </div>
  );
};

const Feed = (props: { id: string }) => {
  const { data } = api.posts.getPostById.useQuery({ id: props.id });
  return (
    <div className="flex h-full w-full grow flex-col border-l border-r border-zinc-700 md:w-[600px]">
      {data && <TweetView tweet={data} />}
    </div>
  );
};

const PostView: NextPage<{ id: string }> = (props) => {
  const { data } = api.posts.getPostById.useQuery({ id: props.id });

  if (!data) {
    return <div>Not found</div>;
  }

  return (
    <>
      <Head>
        <title>ðŸ˜¶ Post</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-black text-white">
        <Feed id={data.id} />
      </main>
    </>
  );
};

export default PostView;

import superjson from "superjson";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";

export async function getServerSideProps(
  context: GetServerSidePropsContext<{ id: string }>
) {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { session: null, prisma },
    transformer: superjson,
  });
  const id = context.params?.id as string;

  // Cache the shit out of it
  context.res.setHeader(
    "Cache-Control",
    "public, s-maxage=10, stale-while-revalidate=99999"
  );

  await ssg.posts.getPostById.prefetch({ id });
  // Make sure to return { props: { trpcState: ssg.dehydrate() } }
  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
}
